{"ast":null,"code":"import _asyncToGenerator from \"/Users/guilhermeytalo/Dev/angular/openCompany/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport { __decorate } from \"tslib\";\nimport __NG_CLI_RESOURCE__0 from \"./app.component.html?ngResource\";\nimport __NG_CLI_RESOURCE__1 from \"./app.component.scss?ngResource\";\nimport { CommonModule } from '@angular/common';\nimport { Component, ViewChild } from '@angular/core';\nimport { ApiService } from './services/api.service';\nimport { FormBuilder, FormGroup, ReactiveFormsModule, Validators } from '@angular/forms';\nimport { HttpClientModule } from '@angular/common/http';\nimport { NgbModal } from '@ng-bootstrap/ng-bootstrap';\nlet AppComponent = class AppComponent {\n  apiService;\n  fb;\n  modalService;\n  successModal;\n  registerForm = new FormGroup({});\n  logoPath = '../assets/logo.jpeg';\n  title = 'openCompany';\n  requests = [];\n  detalhesPedido;\n  entidadesRegistro = [];\n  estados = [];\n  isEditing = false;\n  isOnForm = false;\n  constructor(apiService, fb, modalService) {\n    this.apiService = apiService;\n    this.fb = fb;\n    this.modalService = modalService;\n    this.initForm();\n  }\n  initForm() {\n    this.registerForm = this.fb.group({\n      solicitante: this.fb.group({\n        ds_responsavel: ['', Validators.required],\n        nu_cpf: ['', [Validators.required, Validators.pattern(/^\\d{11}$/)]],\n        date_nascimento: ['', Validators.required]\n      }),\n      empresa: this.fb.group({\n        ds_nome_fantasia: ['', Validators.required],\n        co_entidade_registro: ['', Validators.required],\n        co_natureza_juridica: ['10021'],\n        endereco: this.fb.group({\n          co_cep: ['', [Validators.required, Validators.pattern(/^\\d{8}$/)]],\n          ds_logradouro: ['', Validators.required],\n          co_numero: ['', Validators.required],\n          ds_complemento: [''],\n          ds_bairro: ['', Validators.required],\n          ds_municipio: ['', Validators.required],\n          co_uf: ['', Validators.required]\n        })\n      })\n    });\n  }\n  ngOnInit() {\n    this.loadInitialData();\n  }\n  loadInitialData() {\n    var _this = this;\n    return _asyncToGenerator(function* () {\n      try {\n        const [empresas, entidades, estados] = yield Promise.all([_this.apiService.getEmpresas(), _this.apiService.getEntidadeRegistro(), _this.apiService.getEstados()]);\n        _this.requests = empresas;\n        _this.entidadesRegistro = entidades;\n        _this.estados = estados;\n      } catch (error) {\n        console.error('Error loading initial data:', error);\n      }\n    })();\n  }\n  getDetalhesPedidos(id) {\n    var _this2 = this;\n    return _asyncToGenerator(function* () {\n      try {\n        _this2.detalhesPedido = yield _this2.apiService.getBuscarEmpresa(id);\n      } catch (error) {\n        console.error('Error fetching company details:', error);\n      }\n    })();\n  }\n  editPedido() {\n    if (this.detalhesPedido) {\n      this.isEditing = true;\n      this.isOnForm = true;\n      this.registerForm.patchValue({\n        solicitante: {\n          ds_responsavel: this.detalhesPedido.solicitante.ds_responsavel,\n          nu_cpf: this.detalhesPedido.solicitante.nu_cpf,\n          date_nascimento: this.detalhesPedido.solicitante.date_nascimento\n        },\n        empresa: {\n          ds_nome_fantasia: this.detalhesPedido.empresa.ds_nome_fantasia,\n          co_entidade_registro: this.detalhesPedido.empresa.co_entidade_registro,\n          co_natureza_juridica: this.detalhesPedido.empresa.co_natureza_juridica,\n          endereco: {\n            co_cep: this.detalhesPedido.empresa.endereco.co_cep,\n            ds_logradouro: this.detalhesPedido.empresa.endereco.ds_logradouro,\n            co_numero: this.detalhesPedido.empresa.endereco.co_numero,\n            ds_complemento: this.detalhesPedido.empresa.endereco.ds_complemento,\n            ds_bairro: this.detalhesPedido.empresa.endereco.ds_bairro,\n            ds_municipio: this.detalhesPedido.empresa.endereco.ds_municipio,\n            co_uf: this.detalhesPedido.empresa.endereco.co_uf\n          }\n        }\n      });\n    }\n  }\n  onSubmit() {\n    var _this3 = this;\n    return _asyncToGenerator(function* () {\n      if (_this3.registerForm.valid) {\n        try {\n          const formData = _this3.registerForm.value;\n          if (_this3.isEditing && _this3.detalhesPedido) {\n            yield _this3.apiService.updateEmpresa(_this3.detalhesPedido.id, formData);\n            yield _this3.loadInitialData();\n            yield _this3.getDetalhesPedidos(_this3.detalhesPedido.id);\n          } else {\n            yield _this3.apiService.createEmpresa(formData);\n            yield _this3.loadInitialData();\n          }\n          _this3.modalService.open(_this3.successModal, {\n            centered: true,\n            backdrop: 'static',\n            keyboard: false\n          }).result.then(() => {\n            _this3.resetForm();\n            _this3.isOnForm = false;\n          }, () => {\n            _this3.resetForm();\n            _this3.isOnForm = false;\n          });\n        } catch (error) {\n          console.error('Error saving form:', error);\n        }\n      }\n    })();\n  }\n  changeStatusToForm() {\n    this.isOnForm = !this.isOnForm;\n    this.resetForm();\n  }\n  resetForm() {\n    this.registerForm.reset();\n    this.isEditing = false;\n    this.detalhesPedido = undefined;\n  }\n  static ctorParameters = () => [{\n    type: ApiService\n  }, {\n    type: FormBuilder\n  }, {\n    type: NgbModal\n  }];\n  static propDecorators = {\n    successModal: [{\n      type: ViewChild,\n      args: ['successModal']\n    }]\n  };\n};\nAppComponent = __decorate([Component({\n  selector: 'app-root',\n  standalone: true,\n  imports: [CommonModule, ReactiveFormsModule, HttpClientModule],\n  template: __NG_CLI_RESOURCE__0,\n  styles: [__NG_CLI_RESOURCE__1]\n})], AppComponent);\nexport { AppComponent };","map":{"version":3,"names":["CommonModule","Component","ViewChild","ApiService","FormBuilder","FormGroup","ReactiveFormsModule","Validators","HttpClientModule","NgbModal","AppComponent","apiService","fb","modalService","successModal","registerForm","logoPath","title","requests","detalhesPedido","entidadesRegistro","estados","isEditing","isOnForm","constructor","initForm","group","solicitante","ds_responsavel","required","nu_cpf","pattern","date_nascimento","empresa","ds_nome_fantasia","co_entidade_registro","co_natureza_juridica","endereco","co_cep","ds_logradouro","co_numero","ds_complemento","ds_bairro","ds_municipio","co_uf","ngOnInit","loadInitialData","_this","_asyncToGenerator","empresas","entidades","Promise","all","getEmpresas","getEntidadeRegistro","getEstados","error","console","getDetalhesPedidos","id","_this2","getBuscarEmpresa","editPedido","patchValue","onSubmit","_this3","valid","formData","value","updateEmpresa","createEmpresa","open","centered","backdrop","keyboard","result","then","resetForm","changeStatusToForm","reset","undefined","args","__decorate","selector","standalone","imports","template","__NG_CLI_RESOURCE__0"],"sources":["/Users/guilhermeytalo/Dev/angular/openCompany/src/app/app.component.ts"],"sourcesContent":["import { CommonModule } from '@angular/common';\nimport { Component, OnInit, ViewChild, TemplateRef } from '@angular/core';\nimport { ApiService } from './services/api.service';\nimport { Root, EntidadeRegistro, Estado } from './types/company';\nimport {\n  FormBuilder,\n  FormGroup,\n  ReactiveFormsModule,\n  Validators,\n} from '@angular/forms';\nimport { HttpClientModule } from '@angular/common/http';\nimport { NgbModal } from '@ng-bootstrap/ng-bootstrap';\n\n@Component({\n  selector: 'app-root',\n  standalone: true,\n  imports: [CommonModule, ReactiveFormsModule, HttpClientModule],\n  templateUrl: './app.component.html',\n  styleUrls: ['./app.component.scss'],\n})\nexport class AppComponent implements OnInit {\n  @ViewChild('successModal') successModal!: TemplateRef<any>;\n\n  registerForm: FormGroup = new FormGroup({});\n  logoPath: string = '../assets/logo.jpeg';\n  title = 'openCompany';\n  requests: Root[] = [];\n  detalhesPedido: Root | undefined;\n  entidadesRegistro: EntidadeRegistro[] = [];\n  estados: Estado[] = [];\n  isEditing = false;\n  isOnForm = false;\n\n  constructor(\n    private apiService: ApiService,\n    private fb: FormBuilder,\n    private modalService: NgbModal\n  ) {\n    this.initForm();\n  }\n\n  private initForm() {\n    this.registerForm = this.fb.group({\n      solicitante: this.fb.group({\n        ds_responsavel: ['', Validators.required],\n        nu_cpf: ['', [Validators.required, Validators.pattern(/^\\d{11}$/)]],\n        date_nascimento: ['', Validators.required],\n      }),\n      empresa: this.fb.group({\n        ds_nome_fantasia: ['', Validators.required],\n        co_entidade_registro: ['', Validators.required],\n        co_natureza_juridica: ['10021'],\n        endereco: this.fb.group({\n          co_cep: ['', [Validators.required, Validators.pattern(/^\\d{8}$/)]],\n          ds_logradouro: ['', Validators.required],\n          co_numero: ['', Validators.required],\n          ds_complemento: [''],\n          ds_bairro: ['', Validators.required],\n          ds_municipio: ['', Validators.required],\n          co_uf: ['', Validators.required],\n        }),\n      }),\n    });\n  }\n\n  ngOnInit(): void {\n    this.loadInitialData();\n  }\n\n  async loadInitialData() {\n    try {\n      const [empresas, entidades, estados] = await Promise.all([\n        this.apiService.getEmpresas(),\n        this.apiService.getEntidadeRegistro(),\n        this.apiService.getEstados(),\n      ]);\n\n      this.requests = empresas;\n      this.entidadesRegistro = entidades;\n      this.estados = estados;\n    } catch (error) {\n      console.error('Error loading initial data:', error);\n    }\n  }\n\n  async getDetalhesPedidos(id: number) {\n    try {\n      this.detalhesPedido = await this.apiService.getBuscarEmpresa(id);\n    } catch (error) {\n      console.error('Error fetching company details:', error);\n    }\n  }\n\n  editPedido() {\n    if (this.detalhesPedido) {\n      this.isEditing = true;\n      this.isOnForm = true;\n\n      this.registerForm.patchValue({\n        solicitante: {\n          ds_responsavel: this.detalhesPedido.solicitante.ds_responsavel,\n          nu_cpf: this.detalhesPedido.solicitante.nu_cpf,\n          date_nascimento: this.detalhesPedido.solicitante.date_nascimento,\n        },\n        empresa: {\n          ds_nome_fantasia: this.detalhesPedido.empresa.ds_nome_fantasia,\n          co_entidade_registro:\n            this.detalhesPedido.empresa.co_entidade_registro,\n          co_natureza_juridica:\n            this.detalhesPedido.empresa.co_natureza_juridica,\n          endereco: {\n            co_cep: this.detalhesPedido.empresa.endereco.co_cep,\n            ds_logradouro: this.detalhesPedido.empresa.endereco.ds_logradouro,\n            co_numero: this.detalhesPedido.empresa.endereco.co_numero,\n            ds_complemento: this.detalhesPedido.empresa.endereco.ds_complemento,\n            ds_bairro: this.detalhesPedido.empresa.endereco.ds_bairro,\n            ds_municipio: this.detalhesPedido.empresa.endereco.ds_municipio,\n            co_uf: this.detalhesPedido.empresa.endereco.co_uf,\n          },\n        },\n      });\n    }\n  }\n\n  async onSubmit() {\n    if (this.registerForm.valid) {\n      try {\n        const formData = this.registerForm.value;\n\n        if (this.isEditing && this.detalhesPedido) {\n          await this.apiService.updateEmpresa(this.detalhesPedido.id, formData);\n          await this.loadInitialData();\n          await this.getDetalhesPedidos(this.detalhesPedido.id);\n        } else {\n          await this.apiService.createEmpresa(formData);\n          await this.loadInitialData();\n        }\n        this.modalService\n          .open(this.successModal, {\n            centered: true,\n            backdrop: 'static',\n            keyboard: false,\n          })\n          .result.then(\n            () => {\n              this.resetForm();\n              this.isOnForm = false;\n            },\n            () => {\n              this.resetForm();\n              this.isOnForm = false;\n            }\n          );\n      } catch (error) {\n        console.error('Error saving form:', error);\n      }\n    }\n  }\n\n  changeStatusToForm(): void {\n    this.isOnForm = !this.isOnForm;\n    this.resetForm();\n  }\n\n  resetForm() {\n    this.registerForm.reset();\n    this.isEditing = false;\n    this.detalhesPedido = undefined;\n  }\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}