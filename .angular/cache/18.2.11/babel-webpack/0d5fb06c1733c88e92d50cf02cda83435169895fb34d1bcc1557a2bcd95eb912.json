{"ast":null,"code":"import _asyncToGenerator from \"/Users/guilhermeytalo/Dev/angular/openCompany/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\nimport { TestBed } from '@angular/core/testing';\nimport { ReactiveFormsModule } from '@angular/forms';\nimport { HttpClientTestingModule, HttpTestingController } from '@angular/common/http/testing';\nimport { NgbModule } from '@ng-bootstrap/ng-bootstrap';\nimport { AppComponent } from './app.component';\nimport { ApiService } from './services/api.service';\nimport { provideHttpClient, withInterceptorsFromDi } from '@angular/common/http';\ndescribe('AppComponent', () => {\n  let component;\n  let fixture;\n  let apiService;\n  let httpTestingController;\n  beforeEach( /*#__PURE__*/_asyncToGenerator(function* () {\n    yield TestBed.configureTestingModule({\n      declarations: [AppComponent],\n      imports: [ReactiveFormsModule, HttpClientTestingModule, NgbModule],\n      providers: [ApiService, provideHttpClient(withInterceptorsFromDi())]\n    }).compileComponents();\n    fixture = TestBed.createComponent(AppComponent);\n    component = fixture.componentInstance;\n    apiService = TestBed.inject(ApiService);\n    httpTestingController = TestBed.inject(HttpTestingController);\n    fixture.detectChanges();\n  }));\n  it('should create', () => {\n    expect(component).toBeTruthy();\n  });\n  it('should reset the form when changeStatusToForm() is called', () => {\n    component.changeStatusToForm();\n    expect(component.registerForm.pristine).toBe(true);\n    expect(component.registerForm.untouched).toBe(true);\n  });\n  it('should update the form when editPedido() is called', () => {\n    const solicitante = {\n      ds_responsavel: 'John Doe',\n      nu_cpf: '12345678901',\n      date_nascimento: '1980-01-01'\n    };\n    const endereco = {\n      co_cep: 14022094,\n      ds_logradouro: 'Test Street',\n      co_numero: '123',\n      ds_complemento: 'Apt 1',\n      ds_bairro: 'Test District',\n      ds_municipio: 'Test City',\n      co_uf: '29'\n    };\n    const empresa = {\n      ds_nome_fantasia: 'Test Company',\n      co_entidade_registro: 104306,\n      co_natureza_juridica: 10021,\n      endereco: endereco\n    };\n    const detalhesPedido = {\n      id: 1,\n      solicitante: solicitante,\n      empresa: empresa\n    };\n    spyOn(apiService, 'getBuscarEmpresa').and.returnValue(Promise.resolve(detalhesPedido));\n    component.detalhesPedido = detalhesPedido;\n    component.editPedido();\n    expect(component.registerForm.value.solicitante.ds_responsavel).toBe('John Doe');\n    expect(component.registerForm.value.empresa.ds_nome_fantasia).toBe('Test Company');\n  });\n});","map":{"version":3,"names":["TestBed","ReactiveFormsModule","HttpClientTestingModule","HttpTestingController","NgbModule","AppComponent","ApiService","provideHttpClient","withInterceptorsFromDi","describe","component","fixture","apiService","httpTestingController","beforeEach","_asyncToGenerator","configureTestingModule","declarations","imports","providers","compileComponents","createComponent","componentInstance","inject","detectChanges","it","expect","toBeTruthy","changeStatusToForm","registerForm","pristine","toBe","untouched","solicitante","ds_responsavel","nu_cpf","date_nascimento","endereco","co_cep","ds_logradouro","co_numero","ds_complemento","ds_bairro","ds_municipio","co_uf","empresa","ds_nome_fantasia","co_entidade_registro","co_natureza_juridica","detalhesPedido","id","spyOn","and","returnValue","Promise","resolve","editPedido","value"],"sources":["/Users/guilhermeytalo/Dev/angular/openCompany/src/app/app.component.spec.ts"],"sourcesContent":["import { ComponentFixture, TestBed } from '@angular/core/testing';\nimport { ReactiveFormsModule } from '@angular/forms';\nimport { HttpClientTestingModule, HttpTestingController } from '@angular/common/http/testing';\nimport { NgbModule } from '@ng-bootstrap/ng-bootstrap';\n\nimport { AppComponent } from './app.component';\nimport { ApiService } from './services/api.service';\nimport { Root, Solicitante, Empresa, Endereco, EntidadeRegistro, Estado } from './types/company';\nimport { provideHttpClient, withInterceptorsFromDi } from '@angular/common/http';\n\ndescribe('AppComponent', () => {\n  let component: AppComponent;\n  let fixture: ComponentFixture<AppComponent>;\n  let apiService: ApiService;\n  let httpTestingController: HttpTestingController;\n\n  beforeEach(async () => {\n    await TestBed.configureTestingModule({\n      declarations: [AppComponent],\n      imports: [\n        ReactiveFormsModule,\n        HttpClientTestingModule,\n        NgbModule,\n      ],\n      providers: [\n        ApiService,\n        provideHttpClient(withInterceptorsFromDi()),\n      ],\n    }).compileComponents();\n\n    fixture = TestBed.createComponent(AppComponent);\n    component = fixture.componentInstance;\n    apiService = TestBed.inject(ApiService);\n    httpTestingController = TestBed.inject(HttpTestingController);\n    fixture.detectChanges();\n  });\n\n  it('should create', () => {\n    expect(component).toBeTruthy();\n  });\n\n  it('should reset the form when changeStatusToForm() is called', () => {\n    component.changeStatusToForm();\n    expect(component.registerForm.pristine).toBe(true);\n    expect(component.registerForm.untouched).toBe(true);\n  });\n\n  it('should update the form when editPedido() is called', () => {\n    const solicitante: Solicitante = {\n      ds_responsavel: 'John Doe',\n      nu_cpf: '12345678901',\n      date_nascimento: '1980-01-01',\n    };\n\n    const endereco: Endereco = {\n      co_cep: 14022094,\n      ds_logradouro: 'Test Street',\n      co_numero: '123',\n      ds_complemento: 'Apt 1',\n      ds_bairro: 'Test District',\n      ds_municipio: 'Test City',\n      co_uf: '29',\n    };\n\n    const empresa: Empresa = {\n      ds_nome_fantasia: 'Test Company',\n      co_entidade_registro: 104306,\n      co_natureza_juridica: 10021,\n      endereco: endereco,\n    };\n\n    const detalhesPedido: Root = {\n      id: 1,\n      solicitante: solicitante,\n      empresa: empresa,\n    };\n\n    spyOn(apiService, 'getBuscarEmpresa').and.returnValue(Promise.resolve(detalhesPedido));\n\n    component.detalhesPedido = detalhesPedido;\n    component.editPedido();\n\n    expect(component.registerForm.value.solicitante.ds_responsavel).toBe(\n      'John Doe'\n    );\n    expect(component.registerForm.value.empresa.ds_nome_fantasia).toBe(\n      'Test Company'\n    );\n  });\n});\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}