{"ast":null,"code":"import { TestBed } from '@angular/core/testing';\nimport { HttpClientTestingModule, HttpTestingController } from '@angular/common/http/testing';\nimport { ApiService } from './api.service';\ndescribe('ApiService', () => {\n  let service;\n  let httpTestingController;\n  beforeEach(() => {\n    TestBed.configureTestingModule({\n      imports: [HttpClientTestingModule],\n      providers: [ApiService]\n    });\n    service = TestBed.inject(ApiService);\n    httpTestingController = TestBed.inject(HttpTestingController);\n  });\n  afterEach(() => {\n    httpTestingController.verify();\n  });\n  it('should be created', () => {\n    expect(service).toBeTruthy();\n  });\n  it('should fetch empresas', () => {\n    const mockEmpresas = [{\n      id: 1,\n      solicitante: {\n        ds_responsavel: 'John Doe',\n        nu_cpf: '12345678901',\n        date_nascimento: '1980-01-01'\n      },\n      empresa: {\n        ds_nome_fantasia: 'Test Company',\n        co_entidade_registro: 104306,\n        co_natureza_juridica: 10021,\n        endereco: {\n          co_cep: 14022094,\n          ds_logradouro: 'Test Street',\n          co_numero: '123',\n          ds_complemento: 'Apt 1',\n          ds_bairro: 'Test District',\n          ds_municipio: 'Test City',\n          co_uf: '29'\n        }\n      }\n    }];\n    service.getEmpresas().then(empresas => {\n      expect(empresas).toEqual(mockEmpresas);\n    });\n    const req = httpTestingController.expectOne('http://localhost:3000/empresas');\n    expect(req.request.method).toBe('GET');\n    req.flush(mockEmpresas);\n  });\n  // Add more tests for other methods in the ApiService\n});","map":{"version":3,"names":["TestBed","HttpClientTestingModule","HttpTestingController","ApiService","describe","service","httpTestingController","beforeEach","configureTestingModule","imports","providers","inject","afterEach","verify","it","expect","toBeTruthy","mockEmpresas","id","solicitante","ds_responsavel","nu_cpf","date_nascimento","empresa","ds_nome_fantasia","co_entidade_registro","co_natureza_juridica","endereco","co_cep","ds_logradouro","co_numero","ds_complemento","ds_bairro","ds_municipio","co_uf","getEmpresas","then","empresas","toEqual","req","expectOne","request","method","toBe","flush"],"sources":["/Users/guilhermeytalo/Dev/angular/openCompany/src/app/services/api.service.spec.ts"],"sourcesContent":["import { TestBed } from '@angular/core/testing';\nimport { HttpClientTestingModule, HttpTestingController } from '@angular/common/http/testing';\nimport { ApiService } from './api.service';\nimport { EntidadeRegistro, Estado, Root } from '../types/company';\n\ndescribe('ApiService', () => {\n  let service: ApiService;\n  let httpTestingController: HttpTestingController;\n\n  beforeEach(() => {\n    TestBed.configureTestingModule({\n      imports: [HttpClientTestingModule],\n      providers: [ApiService]\n    });\n\n    service = TestBed.inject(ApiService);\n    httpTestingController = TestBed.inject(HttpTestingController);\n  });\n\n  afterEach(() => {\n    httpTestingController.verify();\n  });\n\n  it('should be created', () => {\n    expect(service).toBeTruthy();\n  });\n\n  it('should fetch empresas', () => {\n    const mockEmpresas: Root[] = [\n      { id: 1, solicitante: { ds_responsavel: 'John Doe', nu_cpf: '12345678901', date_nascimento: '1980-01-01' }, empresa: { ds_nome_fantasia: 'Test Company', co_entidade_registro: 104306, co_natureza_juridica: 10021, endereco: { co_cep: 14022094, ds_logradouro: 'Test Street', co_numero: '123', ds_complemento: 'Apt 1', ds_bairro: 'Test District', ds_municipio: 'Test City', co_uf: '29' } } }\n    ];\n\n    service.getEmpresas().then((empresas) => {\n      expect(empresas).toEqual(mockEmpresas);\n    });\n\n    const req = httpTestingController.expectOne('http://localhost:3000/empresas');\n    expect(req.request.method).toBe('GET');\n    req.flush(mockEmpresas);\n  });\n\n  // Add more tests for other methods in the ApiService\n});"],"mappings":"AAAA,SAASA,OAAO,QAAQ,uBAAuB;AAC/C,SAASC,uBAAuB,EAAEC,qBAAqB,QAAQ,8BAA8B;AAC7F,SAASC,UAAU,QAAQ,eAAe;AAG1CC,QAAQ,CAAC,YAAY,EAAE,MAAK;EAC1B,IAAIC,OAAmB;EACvB,IAAIC,qBAA4C;EAEhDC,UAAU,CAAC,MAAK;IACdP,OAAO,CAACQ,sBAAsB,CAAC;MAC7BC,OAAO,EAAE,CAACR,uBAAuB,CAAC;MAClCS,SAAS,EAAE,CAACP,UAAU;KACvB,CAAC;IAEFE,OAAO,GAAGL,OAAO,CAACW,MAAM,CAACR,UAAU,CAAC;IACpCG,qBAAqB,GAAGN,OAAO,CAACW,MAAM,CAACT,qBAAqB,CAAC;EAC/D,CAAC,CAAC;EAEFU,SAAS,CAAC,MAAK;IACbN,qBAAqB,CAACO,MAAM,EAAE;EAChC,CAAC,CAAC;EAEFC,EAAE,CAAC,mBAAmB,EAAE,MAAK;IAC3BC,MAAM,CAACV,OAAO,CAAC,CAACW,UAAU,EAAE;EAC9B,CAAC,CAAC;EAEFF,EAAE,CAAC,uBAAuB,EAAE,MAAK;IAC/B,MAAMG,YAAY,GAAW,CAC3B;MAAEC,EAAE,EAAE,CAAC;MAAEC,WAAW,EAAE;QAAEC,cAAc,EAAE,UAAU;QAAEC,MAAM,EAAE,aAAa;QAAEC,eAAe,EAAE;MAAY,CAAE;MAAEC,OAAO,EAAE;QAAEC,gBAAgB,EAAE,cAAc;QAAEC,oBAAoB,EAAE,MAAM;QAAEC,oBAAoB,EAAE,KAAK;QAAEC,QAAQ,EAAE;UAAEC,MAAM,EAAE,QAAQ;UAAEC,aAAa,EAAE,aAAa;UAAEC,SAAS,EAAE,KAAK;UAAEC,cAAc,EAAE,OAAO;UAAEC,SAAS,EAAE,eAAe;UAAEC,YAAY,EAAE,WAAW;UAAEC,KAAK,EAAE;QAAI;MAAE;IAAE,CAAE,CACpY;IAED7B,OAAO,CAAC8B,WAAW,EAAE,CAACC,IAAI,CAAEC,QAAQ,IAAI;MACtCtB,MAAM,CAACsB,QAAQ,CAAC,CAACC,OAAO,CAACrB,YAAY,CAAC;IACxC,CAAC,CAAC;IAEF,MAAMsB,GAAG,GAAGjC,qBAAqB,CAACkC,SAAS,CAAC,gCAAgC,CAAC;IAC7EzB,MAAM,CAACwB,GAAG,CAACE,OAAO,CAACC,MAAM,CAAC,CAACC,IAAI,CAAC,KAAK,CAAC;IACtCJ,GAAG,CAACK,KAAK,CAAC3B,YAAY,CAAC;EACzB,CAAC,CAAC;EAEF;AACF,CAAC,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}